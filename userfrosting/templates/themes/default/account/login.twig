{% extends "layouts/layout-jumbotron.twig" %}
{% set page_group = "loggedout" %}

{% block page %}
    {# By putting this in a special block, we ensure that it will be set AFTER the default values are set in the parent template, 
    but BEFORE the page itself is rendered. #}
    
    {% set page = page | merge({
        "title"       : "Login",
        "description" : "Login to your UserFrosting account.",
        "active_page" : "account/login"
    }) %}    

    {{ parent() }}
{% endblock %}

{% block content %}
<h1>Welcome to {{site.site_title}}!</h1>
<p class="lead">Please sign in.</p>
{% include 'components/common/alerts.twig' %}
<form name="login" method="post" action="{{site.uri.public}}/account/login" class="form-horizontal">
    <div class="row">
      <div class="col-md-offset-3 col-md-6">
            <div class="form-group">
                <input type="text" class="form-control " name="user_name" autocomplete="off" value="" placeholder="{{ (site.email_login == 1) ? 'Username or Email' : 'Username' }}">
            </div>
      </div>
      <div class="col-md-offset-3 col-md-6">
        <div class="form-group">
            <input type="password" class="form-control " name="password" autocomplete="off" value="" placeholder="Password">
        </div>
      </div>
      <div class="col-md-offset-3 col-md-6">
        <div class="form-group">
            <div class="checkbox">
                <label>
                    <input type="checkbox" name="rememberme"> Remember me
                </label>
            </div>
        </div>
      </div>
      <div class="col-md-12">
        <button type="submit" class="btn btn-success"  data-loading-text="Please wait..." >
            Login
        </button>
      </div>
    </div>
</form>
{% include 'components/jumbotron/jumbotron-links.twig' %}	
{% endblock %}
 
{% block page_scripts %}
<script>
    $(document).ready(function() {            
      // Process form 
      $("form[name='login']").formValidation({
        framework: 'bootstrap',
        // Feedback icons
        icon: {
            valid: 'fa fa-check',
            invalid: 'fa fa-times',
            validating: 'fa fa-refresh'
        },
        fields: {{validators | raw}}
      }).on('success.form.fv', function(e) {
        // Prevent double form submission
        e.preventDefault();

        // Get the form instance
        var form = $(e.target);

        // Serialize and post to the backend script in ajax mode
        var serializedData = form.serialize();
        
        // Append page CSRF token
        var csrf_token = $("meta[name=csrf_token]").attr("content");
        serializedData += "&csrf_token=" + encodeURIComponent(csrf_token);
        
        var url = form.attr('action');
        $.ajax({  
          type: "POST",  
          url: url,  
          data: serializedData       
        }).done(function(data, statusText, jqXHR) {
            // Forward to account home page on success
            window.location.replace(site.uri.public);
        }).fail(function(jqXHR) {
            if ((typeof site !== "undefined") && site['debug'] == true) {
                document.body.innerHTML = jqXHR.responseText;
            } else {
                console.log("Error (" + jqXHR.status + "): " + jqXHR.responseText );
                // Display errors on failure
                $('#userfrosting-alerts').flashAlerts().done(function() {
                    // Re-enable submit button
                    form.data('formValidation').disableSubmitButtons(false);
                });
            }
        });
      });
    });        
</script>
{% endblock %}
